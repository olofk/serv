load("@bazel-orfs//:openroad.bzl", "orfs_flow")
load("@bazel-orfs//:ppa.bzl", "orfs_ppa")

FASTER = {
    # ignore timing repair for now
    #"SETUP_SLACK_MARGIN": "-1000",
    "SKIP_REPORT_METRICS": "1",
    "SKIP_LAST_GASP": "1",
    # skip checks for now, faster
    "PWR_NETS_VOLTAGES": "",
    "GND_NETS_VOLTAGES": "",
}

filegroup(
    name = "io",
    srcs = [":io.tcl"],
    data = [":util.tcl"],
)

WIDTHS = [1 << i for i in range(0, 6)]

PDKS = [
    "sky130hd",
    "asap7",
]

[orfs_flow(
    name = "serv_top",
    arguments = FASTER | {
                    "SYNTH_HIERARCHICAL": "1",
                    "CORE_UTILIZATION": "5",
                    "PLACE_DENSITY": "0.8",
                    "CORE_MARGIN": "1",
                    "VERILOG_TOP_PARAMS": "W {width}".format(width = width),
                } |
                (
                    {
                        "IO_PLACER_H": "M2 M4",
                        "IO_PLACER_V": "M3 M5",
                    } if pdk == "asap7" else {
                        "IO_PLACER_H":"met3 met5",
                        "IO_PLACER_V": "met2 met4",
                    }
                ),
    pdk = "@docker_orfs//:{}".format(pdk),
    sources = {
        "SDC_FILE": [":constraints_{}.sdc".format(pdk)],
        "IO_CONSTRAINTS": [":io"],
    },
    variant = "{pdk}_{width}".format(
        pdk = pdk,
        width = width,
    ),
    verilog_files = ["//:verilog"],
) for width in WIDTHS for pdk in PDKS]

[orfs_ppa(
    name = "ppa_" + pdk,
    plot = ["serv_top_{pdk}_{width}_cts".format(
        pdk = pdk,
        width = width,
    ) for width in WIDTHS],
    title = "serv_top vs. bit width (W)",
) for pdk in PDKS]
